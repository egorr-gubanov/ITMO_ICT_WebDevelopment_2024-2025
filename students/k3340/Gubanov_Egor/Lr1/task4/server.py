import socket
import threading
from datetime import datetime

HOST = '127.0.0.1'
PORT = 8004
ENCODING = 'utf-8'

clients = {}
clients_lock = threading.Lock()

def broadcast(message, exclude_sock=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º –∫—Ä–æ–º–µ –∏—Å–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ"""
    data = (message + "\n").encode(ENCODING)
    with clients_lock:
        for sock in list(clients.keys()):
            if sock is exclude_sock:
                continue
            try:
                sock.sendall(data)
            except Exception:
                remove_client(sock)

def remove_client(sock):
    """–£–¥–∞–ª—è–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ —á–∞—Ç–∞"""
    with clients_lock:
        name = clients.pop(sock, None)
    try:
        sock.close()
    except:
        pass
    if name:
        broadcast(f"üî¥ {name} –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç")

def handle_client(conn, addr):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞"""
    with conn:
        try:
            name = conn.recv(1024).decode(ENCODING).strip()
            if not name:
                name = f"–ì–æ—Å—Ç—å_{addr[1]}"

            with clients_lock:
                clients[conn] = name
            
            print(f"{name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É ({addr})")
            broadcast(f"{name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É")

            while True:
                try:
                    data = conn.recv(4096)
                    if not data:
                        break
                    msg = data.decode(ENCODING).strip()
                    if msg.lower() == '/quit':
                        break
                    print(f"[{datetime.now().strftime('%H:%M:%S')}] {name}: {msg}")
                    broadcast(f"{name}: {msg}", exclude_sock=conn)
                except socket.error as e:
                    print(f"–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å {name} —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ: {e}")
                    break
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ {addr}: {e}")
        finally:
            remove_client(conn)

def main():
    print("–ú–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —á–∞—Ç —Å–µ—Ä–≤–µ—Ä")
    print("=" * 40)
    
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        s.bind((HOST, PORT))
        s.listen(10)
        
        print(f"–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ {HOST}:{PORT}")
        print(f"–ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å: –í–∫–ª—é—á–µ–Ω–∞")
        print(f"–ú–∞–∫—Å–∏–º—É–º –∫–ª–∏–µ–Ω—Ç–æ–≤: 10")
        print("\n–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
        
        try:
            while True:
                conn, addr = s.accept()
                thread = threading.Thread(target=handle_client, args=(conn, addr), daemon=True)
                thread.start()
        except KeyboardInterrupt:
            print("\n\n–°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è...")
            with clients_lock:
                for sock in list(clients.keys()):
                    try:
                        sock.close()
                    except:
                        pass
            print("–í—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç—ã")

if __name__ == '__main__':
    main()
